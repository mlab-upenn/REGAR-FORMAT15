data;
param nvertices 	 := 5;
param nedges         := 5;
param nRules    	 := 2;
param N         	 := 3;
set VERTICES     := 1 2 3 4 5 6 7 8 9 10;
set RULES        := R1 R2;
set SUBGRAPHS    := 1 2 3 4 5 6 7 8 9 ;
set TIME0        := 0 1 2 3;
set TIME 		 := 1 2 3;
set ZERO         := 0;

# R1 deletes an edge, and applies to simple vev'
# R2 merges two vertices together, and applies to linear graphs with 3 vertices

# The initial values of vertex parameters
param Px0 :=
    1  500
    2 500
    3 500
    4 500
    5 500
    6 400
    7 400
    8 400
    9 400
    10 400;

#for {x in VERTICES} Px[x,0] = Px0[x];
# Terms for the linear predicate Phi
param C := R1 600   R2 600;
param B : 
       1   2  3  4  5  6  7  8  9  10 :=
 R1    1   1  1  1  1  1  1  1  1  1
 R2    1   1  1  1  1  1  1  1  1  1;

# Preserved elements
set VPHI := 1 4 9;
# Element list of induced subgraphs. 
# (s,x) means x (given by its identity in G) is in subgraph Ks	
set KX := 
	(1,*) 1 3 6
	(2,*) 2 3 7
	(3,*) 3 4 8 
	(4,*) 1 4 9
	(5,*) 4 5 10
	(6,*) 1 3 4 6 8
	(7,*) 1 4 5 9 10
	(8,*) 2 3 4 7 8
	(9,*) 3 4 5 8 10 ;
	
# (R,Ks) in KRULES means that Ks is a stage for R
set KRULES := 
	(R1,*) 1 2 3 4 5
	(R2,*) 6 7 ;      #8 9;
	
# DESTROYED[i] are the Stages destroyed by application of R_i
set DESTROYED[R1,1] := 1 6;
set DESTROYED[R1,2] := 2 8;
set DESTROYED[R1,3] := 3 8 9;
set DESTROYED[R1,4] := 4 7;
set DESTROYED[R1,5] := 5 7 9;
set DESTROYED[R2,6] := 6 1 4 7 ;
set DESTROYED[R2,7] := 7 1 4 6 ;

# Abstractness for every rule
# 
# deltaRV gives how many vertices are removed by application of a rule
param deltaRV := R1 1 R2 1; 
# deltaRE gives how many edges are removed by application of a rule
param deltaRE := R1 0 R2 1; 
