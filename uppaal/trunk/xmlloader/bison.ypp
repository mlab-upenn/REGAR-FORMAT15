%{

 
 #include <stdio.h>


void guarderror (const char* s) {
     printf ("Bison: ");
     printf ("%s\n",s);
     }

int guardlex ();
void* guard_scan_string (const char*);

	 #include "xmlloader/bisonHead.hpp"

%}

%code requires {
      #include <iostream>
      #include <sstream>
      #include <string>
      #include "xmlloader/Visitable.hpp"
      #include "xmlloader/Visitor.hpp"
      #include "symbTrace/DCConstraint.hpp"
       #include <map>
	 #include <string>
	 #include <vector>
	 using namespace std;

      }

%union {
       Visitable* visiting;
       int value;
       string* text;
       }

%token<text> IDENTIFIER
%token<value> NUMBER
%token LESS LEQ GEQ GREATER NEQUAL EQUAL LPARAN RPARAN

%token NUM
%left PLUS MINUS
%left DIVIDE TIMES
%left NEG     /* negation--unary minus */

%type <visiting> guard expr

%%

guard:
expr LESS expr {$$=new Guard (false,true,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr LEQ expr {$$=new Guard (false,false,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr GEQ expr {$$=new Guard (true,false,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr GREATER expr {$$=new Guard (true,true,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     | expr EQUAL expr {$$=new Guard ((Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     | expr NEQUAL expr {$$=0; guard=0;}
       
     | LPARAN expr LESS expr {$$=new Guard (false,true,(Expr*)$2,(Expr*)$4);guard=(Guard*)$$;}
     | LPARAN expr LEQ expr {$$=new Guard (false,false,(Expr*)$2,(Expr*)$4);guard=(Guard*)$$;}
     |LPARAN expr GEQ expr {$$=new Guard (true,false,(Expr*)$2,(Expr*)$4);guard=(Guard*)$$;}
     |LPARAN expr GREATER expr {$$=new Guard (true,true,(Expr*)$2,(Expr*)$4);guard=(Guard*)$$;}
     |LPARAN expr EQUAL expr {$$=new Guard ((Expr*)$2,(Expr*)$4);guard=(Guard*)$$;}
     
     | expr LESS expr RPARAN {$$=new Guard (false,true,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr LEQ expr RPARAN{$$=new Guard (false,false,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr GEQ expr RPARAN {$$=new Guard (true,false,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     |expr GREATER expr RPARAN {$$=new Guard (true,true,(Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}
     | expr EQUAL expr RPARAN {$$=new Guard ((Expr*)$1,(Expr*)$3);guard=(Guard*)$$;}



expr:  expr PLUS expr {$$=new PlusExpr ((Expr*)$1,(Expr*)$3);}
     | expr MINUS expr  {$$=new SubExpr ((Expr*)$1,(Expr*)$3); }
     | expr TIMES expr  {$$=new MultExpr ((Expr*)$1,(Expr*)$3);}
     | expr DIVIDE expr  {$$=new DivExpr ((Expr*)$1,(Expr*)$3);}
     | LPARAN expr RPARAN  {$$=new ParanExpr ((Expr*)$2);}
     | MINUS expr  {$$=new NegExpr ((Expr*)$2);}
     | NUMBER  {$$ = new ValExpr ($1);}
     | IDENTIFIER  {$$=new IdentExpr ($1);}
;
%%

dc_t* modifyConstraint (map<string, string>& localClocks, map<string, string>& systemClocks, map<string, string>& localVariables, map<string, string>& systemVariables, map<string,int>& varState, string &s,string& zero)
{
	
    guard_scan_string (s.c_str ());
    guardparse ();
    if (guard==0)
       return 0;
    ConstraintModifier* mod = new ConstraintModifier(zero);
    mod->setClocks (&systemClocks, &localClocks);
    mod->setValues (&systemVariables, &localVariables, &varState);
    mod->caseGuard(guard);
    dc_t* constraint = mod->createGuard();
    delete guard;
    delete mod;
    return constraint;
}

